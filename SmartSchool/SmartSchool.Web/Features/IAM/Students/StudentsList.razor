@using SmartSchool.Web.Features.IAM.Students.CreateStudent
@using SmartSchool.Web.Services.BffApiClient

@attribute [StreamRendering(true)]

@page "/iam/students"
@inject IBffApiClient bffApiClient


@if(IsLoading)
{
    <p>Loading...</p>
} 
else
{
    <div class="row mb-5">
        <div class="col-6">
            <CreateStudentButton />
            <CreateStudentModal OnStudentCreated="AddStudentToList" />
        </div>
    </div>
   <div class="row">
       <div class="col-12">
           <table class="table">
               <thead>
                   <tr>
                        <th>Roll Number</th>
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th>Email</th>
                        <th>Age</th>
                        <th>Action</th>
                   </tr>
               </thead>
               <tbody>
                   @foreach (var student in Students)
                   {
                       <tr>
                           <th>@student.RollNumber</th>
                           <th>@student.FirstName</th>
                           <th>@student.LastName</th>
                           <th>@student.Email</th>
                           <th>@student.Age</th>
                           <th>
                               <div class="row">
                                   <div class="col-6">
                                        <ManageStudentButton StudentId="@student.StudentId"/>
                                   </div>
                                   <div class="col-6">
                                        <DeleteStudentButton StudentId="@student.StudentId" OnStudentDeleted="RemoveStudentFromList" />
                                   </div>
                               </div>                                
                           </th>
                       </tr>
                   }
               </tbody>
           </table>
       </div>
   </div>
}

@code {

    private bool IsLoading { get; set; } = true;
    private List<StudentBasicInfo> Students { get; set; } = new List<StudentBasicInfo>();    

    protected override async Task OnInitializedAsync()
    {
        var paging = new PagingOptions(1, 10);
        var result = await bffApiClient.ListStudentsAsync(paging);
        Students = result.ToList();
        IsLoading = false;       
    }

    private void AddStudentToList(StudentBasicInfo newStudent)
    {
        Students.Add(newStudent);
    }

    private void RemoveStudentFromList(int studentId)
    {
        var studentToRemove = Students.Single(s => s.StudentId == studentId);
        Students.Remove(studentToRemove);
    }
}
