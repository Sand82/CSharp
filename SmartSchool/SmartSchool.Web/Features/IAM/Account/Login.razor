@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using SmartSchool.Web.Components.Layout
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims

@page "/login"
@layout AuthLayout
@attribute [AllowAnonymous]

@inject NavigationManager navigation
@inject UserManager<IdentityUser> userManager
@inject IUserStore<IdentityUser> userStore;
@inject RoleManager<IdentityRole> roleManager;
@inject SignInManager<IdentityUser> signInManager;

<EditForm method="post" Model="LoginForm" OnValidSubmit="PerformLogin" FormName="login">
    <hr />
    <div class="form-outline">
        <label for="email" class="form-label">Email: </label>
        <InputText class="form-control" @bind-Value="LoginForm.Email" required placefolder="user@example.com" />

    </div>

     <div class="form-outline">
        <label for="password" class="form-label">Password: </label>
        <InputText type="password" class="form-control" @bind-Value="LoginForm.Password" required />

        <div class="text-center pt-1 mb-5 pb-1">
            <button class="btn btn-primary btn-block fa-lg gradient-custom-2 mb-3" type="submit" >Login</button>

        </div>

    </div>
</EditForm>

@code {

    [SupplyParameterFromForm]
    public LoginModel LoginForm { get; set; } = new();

    private const string superAdmin = "Superadmin";   

    public async Task PerformLogin (EditContext editContext)
    {
        // var identity = new IdentityUser();
        // var setUsernameResult = await userManager.SetUserNameAsync(identity, LoginForm.Email);

        // var emailStore = (IUserEmailStore<IdentityUser>)userStore;
        // await emailStore.SetEmailAsync(identity, LoginForm.Email, CancellationToken.None);

        // var createdIdentity = await userManager.CreateAsync(identity, LoginForm.Password);

        // var superAdminRole = new IdentityRole(superAdmin);
        // var roleResult =await roleManager.CreateAsync(superAdminRole);

        // var claims = new List<Claim>
        // {
        //     new("firstName", "Sand"),
        //     new("lastName", "Stefanov")
        // };

        // await userManager.AddClaimsAsync(identity, claims);

        // var assignRoleResult = await userManager.AddToRoleAsync(identity, superAdmin);

        

        await signInManager.PasswordSignInAsync(LoginForm.Email, LoginForm.Password, true, lockoutOnFailure: false);

        navigation.NavigateTo("/");
    }

    public class LoginModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = string.Empty;

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = string.Empty;
    }
}
